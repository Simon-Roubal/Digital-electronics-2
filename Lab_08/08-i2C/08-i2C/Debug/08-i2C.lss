
08-i2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000003dc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080011e  0080011e  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8d  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000941  00000000  00000000  00001355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000658  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000551  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_18>
  4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 36       	cpi	r26, 0x63	; 99
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM0_overflow_16ms();
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	85 bd       	out	0x25, r24	; 37
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	85 60       	ori	r24, 0x05	; 5
  bc:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
    TIM1_overflow_4s();
  c8:	e1 e8       	ldi	r30, 0x81	; 129
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  d8:	ef e6       	ldi	r30, 0x6F	; 111
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
    

    // Enables interrupts by setting the global interrupt mask
    sei();
  e2:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 a8 01 	call	0x350	; 0x350 <uart_puts>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x46>

000000ee <__vector_16>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1

}
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_13>:
ISR(TIMER1_OVF_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <__vector_13+0x28>
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[3] = "000"; // String for converting numbers by itoa()
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	90 e3       	ldi	r25, 0x30	; 48
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	8b 83       	std	Y+3, r24	; 0x03

    twi_start((0x5c) + TWI_WRITE);
 13c:	8c e5       	ldi	r24, 0x5C	; 92
 13e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <twi_start>
    twi_write(0x02);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 01 01 	call	0x202	; 0x202 <twi_write>
    result = twi_read_ack();
 148:	0e 94 0c 01 	call	0x218	; 0x218 <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 b7 01 	call	0x36e	; 0x36e <__itoa_ncheck>
    itoa(result,uart_string,10);
    uart_puts(uart_string);
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 a8 01 	call	0x350	; 0x350 <uart_puts>
    result = twi_read_nack();
 162:	0e 94 17 01 	call	0x22e	; 0x22e <twi_read_nack>
 166:	4a e0       	ldi	r20, 0x0A	; 10
 168:	be 01       	movw	r22, r28
 16a:	6f 5f       	subi	r22, 0xFF	; 255
 16c:	7f 4f       	sbci	r23, 0xFF	; 255
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 b7 01 	call	0x36e	; 0x36e <__itoa_ncheck>
    itoa(result,uart_string,10);
    uart_puts(uart_string);
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 a8 01 	call	0x350	; 0x350 <uart_puts>

    
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	8f 7c       	andi	r24, 0xCF	; 207
 1ac:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	80 63       	ori	r24, 0x30	; 48
 1b2:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 1b4:	e9 eb       	ldi	r30, 0xB9	; 185
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8c 7f       	andi	r24, 0xFC	; 252
 1bc:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 1be:	88 e9       	ldi	r24, 0x98	; 152
 1c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1c4:	08 95       	ret

000001c6 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 1c6:	94 ea       	ldi	r25, 0xA4	; 164
 1c8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 1cc:	ec eb       	ldi	r30, 0xBC	; 188
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	90 81       	ld	r25, Z
 1d2:	99 23       	and	r25, r25
 1d4:	ec f7       	brge	.-6      	; 0x1d0 <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 1d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 1da:	84 e8       	ldi	r24, 0x84	; 132
 1dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 1e0:	ec eb       	ldi	r30, 0xBC	; 188
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 1ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1ee:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 1f0:	98 31       	cpi	r25, 0x18	; 24
 1f2:	29 f0       	breq	.+10     	; 0x1fe <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 34       	cpi	r25, 0x40	; 64
 1f8:	19 f4       	brne	.+6      	; 0x200 <twi_start+0x3a>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 200:	08 95       	ret

00000202 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 202:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 20c:	ec eb       	ldi	r30, 0xBC	; 188
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	ec f7       	brge	.-6      	; 0x210 <twi_write+0xe>
}
 216:	08 95       	ret

00000218 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 218:	84 ec       	ldi	r24, 0xC4	; 196
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 21e:	ec eb       	ldi	r30, 0xBC	; 188
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	88 23       	and	r24, r24
 226:	ec f7       	brge	.-6      	; 0x222 <twi_read_ack+0xa>
    return (TWDR);
 228:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 22c:	08 95       	ret

0000022e <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 22e:	84 e8       	ldi	r24, 0x84	; 132
 230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 234:	ec eb       	ldi	r30, 0xBC	; 188
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	88 23       	and	r24, r24
 23c:	ec f7       	brge	.-6      	; 0x238 <twi_read_nack+0xa>
    return (TWDR);
 23e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 242:	08 95       	ret

00000244 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 25c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 260:	8c 71       	andi	r24, 0x1C	; 28
 262:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <UART_RxHead>
 266:	ef 5f       	subi	r30, 0xFF	; 255
 268:	ef 71       	andi	r30, 0x1F	; 31
 26a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_RxTail>
 26e:	e9 17       	cp	r30, r25
 270:	39 f0       	breq	.+14     	; 0x280 <__vector_18+0x3c>
 272:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <UART_RxHead>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ed 5d       	subi	r30, 0xDD	; 221
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	20 83       	st	Z, r18
 27e:	01 c0       	rjmp	.+2      	; 0x282 <__vector_18+0x3e>
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
 286:	89 2b       	or	r24, r25
 288:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_19>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
 2b2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UART_TxHead>
 2b6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <UART_TxTail>
 2ba:	98 17       	cp	r25, r24
 2bc:	69 f0       	breq	.+26     	; 0x2d8 <__vector_19+0x38>
 2be:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <UART_TxTail>
 2c2:	ef 5f       	subi	r30, 0xFF	; 255
 2c4:	ef 71       	andi	r30, 0x1F	; 31
 2c6:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <UART_TxTail>
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ed 5b       	subi	r30, 0xBD	; 189
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	80 81       	ld	r24, Z
 2d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <__vector_19+0x42>
 2d8:	e1 ec       	ldi	r30, 0xC1	; 193
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	8f 7d       	andi	r24, 0xDF	; 223
 2e0:	80 83       	st	Z, r24
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <uart_init>:
 2f4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_TxHead>
 2f8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_TxTail>
 2fc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_RxHead>
 300:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_RxTail>
 304:	99 23       	and	r25, r25
 306:	1c f4       	brge	.+6      	; 0x30e <uart_init+0x1a>
 308:	22 e0       	ldi	r18, 0x02	; 2
 30a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 30e:	90 78       	andi	r25, 0x80	; 128
 310:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 314:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 318:	88 e9       	ldi	r24, 0x98	; 152
 31a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 324:	08 95       	ret

00000326 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 326:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <UART_TxHead>
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 32e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_TxTail>
 332:	29 17       	cp	r18, r25
 334:	e1 f3       	breq	.-8      	; 0x32e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 336:	e2 2f       	mov	r30, r18
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ed 5b       	subi	r30, 0xBD	; 189
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 340:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 344:	e1 ec       	ldi	r30, 0xC1	; 193
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	80 62       	ori	r24, 0x20	; 32
 34c:	80 83       	st	Z, r24
 34e:	08 95       	ret

00000350 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
    while (*s)
 356:	88 81       	ld	r24, Y
 358:	88 23       	and	r24, r24
 35a:	31 f0       	breq	.+12     	; 0x368 <uart_puts+0x18>
 35c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 35e:	0e 94 93 01 	call	0x326	; 0x326 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 362:	89 91       	ld	r24, Y+
 364:	81 11       	cpse	r24, r1
 366:	fb cf       	rjmp	.-10     	; 0x35e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <__itoa_ncheck>:
 36e:	bb 27       	eor	r27, r27
 370:	4a 30       	cpi	r20, 0x0A	; 10
 372:	31 f4       	brne	.+12     	; 0x380 <__itoa_ncheck+0x12>
 374:	99 23       	and	r25, r25
 376:	22 f4       	brpl	.+8      	; 0x380 <__itoa_ncheck+0x12>
 378:	bd e2       	ldi	r27, 0x2D	; 45
 37a:	90 95       	com	r25
 37c:	81 95       	neg	r24
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	0c 94 c3 01 	jmp	0x386	; 0x386 <__utoa_common>

00000384 <__utoa_ncheck>:
 384:	bb 27       	eor	r27, r27

00000386 <__utoa_common>:
 386:	fb 01       	movw	r30, r22
 388:	55 27       	eor	r21, r21
 38a:	aa 27       	eor	r26, r26
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	aa 1f       	adc	r26, r26
 392:	a4 17       	cp	r26, r20
 394:	10 f0       	brcs	.+4      	; 0x39a <__utoa_common+0x14>
 396:	a4 1b       	sub	r26, r20
 398:	83 95       	inc	r24
 39a:	50 51       	subi	r21, 0x10	; 16
 39c:	b9 f7       	brne	.-18     	; 0x38c <__utoa_common+0x6>
 39e:	a0 5d       	subi	r26, 0xD0	; 208
 3a0:	aa 33       	cpi	r26, 0x3A	; 58
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <__utoa_common+0x20>
 3a4:	a9 5d       	subi	r26, 0xD9	; 217
 3a6:	a1 93       	st	Z+, r26
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	79 f7       	brne	.-34     	; 0x38a <__utoa_common+0x4>
 3ac:	b1 11       	cpse	r27, r1
 3ae:	b1 93       	st	Z+, r27
 3b0:	11 92       	st	Z+, r1
 3b2:	cb 01       	movw	r24, r22
 3b4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <strrev>

000003b8 <strrev>:
 3b8:	dc 01       	movw	r26, r24
 3ba:	fc 01       	movw	r30, r24
 3bc:	67 2f       	mov	r22, r23
 3be:	71 91       	ld	r23, Z+
 3c0:	77 23       	and	r23, r23
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <strrev+0x4>
 3c4:	32 97       	sbiw	r30, 0x02	; 2
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <strrev+0x18>
 3c8:	7c 91       	ld	r23, X
 3ca:	6d 93       	st	X+, r22
 3cc:	70 83       	st	Z, r23
 3ce:	62 91       	ld	r22, -Z
 3d0:	ae 17       	cp	r26, r30
 3d2:	bf 07       	cpc	r27, r31
 3d4:	c8 f3       	brcs	.-14     	; 0x3c8 <strrev+0x10>
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
